/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package Core;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringReader;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author CINOTER
 */
public class AppA extends javax.swing.JFrame {
    
    
    //analizadores
    Analizador.scanner sc=null;
    Analizador.Parser par=null;
    Analizador.Nodo instrucciones;
            
    //variables 
	public HashMap<String, Variable> Variables = new HashMap<String, Variable>();
        
    
    //socket para la comunicacion
    static Socket conexion;
    
    //path del archivo actual
    String ubicacion = "";  
    
    //errores semanticos
    public LinkedList<Analizador.Errores> ErroresSemanticos=new LinkedList<Analizador.Errores>();
    
    /**
     * Creates new form AppA
     */
    public AppA() {
        
        initComponents();
        //centrar la ventana en la pantalla
        this.setLocationRelativeTo(null);
        //definir el tamaño del Form
        FErrores.setBounds(0, 0, 701, 379);
        //centrar la ventana en la pantalla
        FErrores.setLocationRelativeTo(null);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        FErrores = new javax.swing.JFrame();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TablaErrores = new javax.swing.JTable();
        fAcerca = new javax.swing.JFrame();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        editor = new javax.swing.JTextPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenuItem11 = new javax.swing.JMenuItem();

        jLabel1.setFont(new java.awt.Font("Tempus Sans ITC", 1, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Errores");

        TablaErrores.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(TablaErrores);

        javax.swing.GroupLayout FErroresLayout = new javax.swing.GroupLayout(FErrores.getContentPane());
        FErrores.getContentPane().setLayout(FErroresLayout);
        FErroresLayout.setHorizontalGroup(
            FErroresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 686, Short.MAX_VALUE)
        );
        FErroresLayout.setVerticalGroup(
            FErroresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FErroresLayout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 341, Short.MAX_VALUE))
        );

        fAcerca.setResizable(false);

        jLabel2.setFont(new java.awt.Font("French Script MT", 0, 20)); // NOI18N
        jLabel2.setText("Erick Geovani Dávila Reyes");

        jLabel3.setFont(new java.awt.Font("French Script MT", 0, 20)); // NOI18N
        jLabel3.setText("200915455");

        jLabel4.setFont(new java.awt.Font("French Script MT", 0, 20)); // NOI18N
        jLabel4.setText("USAC");

        jLabel5.setFont(new java.awt.Font("French Script MT", 0, 20)); // NOI18N
        jLabel5.setText("Facultad de Ingeniería");

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Core/EscudoUSAC.jpg"))); // NOI18N

        javax.swing.GroupLayout fAcercaLayout = new javax.swing.GroupLayout(fAcerca.getContentPane());
        fAcerca.getContentPane().setLayout(fAcercaLayout);
        fAcercaLayout.setHorizontalGroup(
            fAcercaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fAcercaLayout.createSequentialGroup()
                .addGap(102, 102, 102)
                .addGroup(fAcercaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(fAcercaLayout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(108, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, fAcercaLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(fAcercaLayout.createSequentialGroup()
                .addGap(114, 114, 114)
                .addComponent(jLabel5)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(fAcercaLayout.createSequentialGroup()
                .addGap(159, 159, 159)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        fAcercaLayout.setVerticalGroup(
            fAcercaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, fAcercaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setName("APLLICACION A"); // NOI18N

        jScrollPane1.setViewportView(editor);

        jMenu1.setText("Archivo");

        jMenuItem1.setText("Nuevo");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Abrir");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setText("Guardar");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuItem4.setText("Guardar como");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuItem8.setText("Salir");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem8);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Compilar");

        jMenuItem5.setText("Ejecutar");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem5);

        jMenuItem6.setText("Listado de Errores");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem6);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Ayuda");

        jMenuItem7.setText("Acerca de..");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem7);

        jMenuItem9.setText("Variables");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem9);

        jMenuItem10.setText("Arbol");
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem10);

        jMenuItem11.setText("Conectar");
        jMenuItem11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem11ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem11);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 504, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 299, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // TODO add your handling code here:
        try{
        //limpiar variables
            Variables.clear();
            
            
        sc=new Analizador.scanner(new StringReader(editor.getText()));
        par=new Analizador.Parser(sc);
        par.parse();
            
        
        
            instrucciones=par.Instrucciones;
            //REVISAR SI HAY ERRORES
            if(this.HayErroes())
             FErrores.setVisible(true);
            else
               this.ejecutar(instrucciones);
        
            
        
        }catch(Exception e)
        {
            System.out.println(e);
        }
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        // TODO add your handling code here:
        FErrores.setVisible(true);
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        // TODO add your handling code here:
        
        HashMap<String,Core.Variable> var=new HashMap<String,Core.Variable>();
        Core.Variable v;
        String clave;
        var=Variables;
    Iterator<String> productos = var.keySet().iterator();
    System.out.println("Hay las siguientes Variables:");
    while(productos.hasNext()){
        clave = productos.next();
        v=var.get(clave);
        System.out.println(clave + " - " + v.getTipo()+" - "+v.getValor());
    }        
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        // TODO add your handling code here:
        instrucciones=par.Instrucciones;
  this.Preorden(instrucciones,0);
        
    }//GEN-LAST:event_jMenuItem10ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        editor.setText("");
		ErroresSemanticos.clear();
        TablaErrores.setModel(new DefaultTableModel());
        
        
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        this.guardar();
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
        this.guardarComo();
        
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        this.abrirArchivo();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        // TODO add your handling code here:
        fAcerca.setBounds(0, 0, 380, 300);
        fAcerca.setLocationRelativeTo(null);
        fAcerca.setVisible(true);
        
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem11ActionPerformed
        // TODO add your handling code here:
        try{
        conexion = new Socket("127.0.0.1", 1318);
        }catch(Exception ex)
        {
            JOptionPane.showMessageDialog(null,"No se puede comunicar con el Servidor");
        }
    }//GEN-LAST:event_jMenuItem11ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws IOException {
        
       
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AppA.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AppA.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AppA.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AppA.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AppA().setVisible(true);
            }
        }
        
        
        );
        
         //se crea el sockect ip localhost y  puerto 1318
        try{
        conexion = new Socket("127.0.0.1", 1318);
        }catch(Exception ex)
        {
            JOptionPane.showMessageDialog(null,"No se puede comunicar con el Servidor");
        }
        
        
    }

    public void Preorden(Analizador.Nodo raiz, int nivel)
        {
            for(int l=0;l<nivel;l++)
                System.out.print("|-|");
            System.out.println(raiz.valor+" --> "+raiz.hijos.size());
            for(int i=0;i<raiz.hijos.size();i++)
            {
                this.Preorden(raiz.hijos.get(i),nivel+1);
            }
        }
    
    
    private boolean HayErroes()
    {
        boolean r=true;
        /////// Lista de errores /////////////////////
        LinkedList<Analizador.Errores> el=new LinkedList<Analizador.Errores>();
        LinkedList<Analizador.Errores> es=new LinkedList<Analizador.Errores>();
        el=sc.ErroresLexicos;
        es=par.ErroresSintacticos;
        //Definir el modelo de la tabla para errores
        DefaultTableModel tm=new DefaultTableModel();
        tm.addColumn("Error");tm.addColumn("Linea");tm.addColumn("Columna");tm.addColumn("Descripción");
        
        //errores lexicos
        for(Iterator<Analizador.Errores> it = el.iterator(); it.hasNext();) {
            Analizador.Errores val=it.next();
            System.out.println(val.getLinea()+","+val.getColumna()+" "+val.getDescripcion());
            Object[] newRow={"Error Lexico",val.getLinea(),val.getColumna(),val.getDescripcion()};
            tm.addRow(newRow);
        }
        
        //errores sintacticos               
        for(Iterator<Analizador.Errores> it = es.iterator(); it.hasNext();) {
            Analizador.Errores val=it.next();
            System.out.println(val.getLinea()+","+val.getColumna()+" "+val.getDescripcion());
            Object[] newRow={"Error Sintactico",val.getLinea(),val.getColumna(),val.getDescripcion()};
            tm.addRow(newRow);
        }
        
		//errores semanticos             
        for(Iterator<Analizador.Errores> it = ErroresSemanticos.iterator(); it.hasNext();) {
            Analizador.Errores val=it.next();
            System.out.println(val.getLinea()+","+val.getColumna()+" "+val.getDescripcion());
            Object[] newRow={"Error Semantico",val.getLinea(),val.getColumna(),val.getDescripcion()};
            tm.addRow(newRow);
        }
        //agergar el modelo lexico a la tabla con tamaño adecuado
        TablaErrores.setModel(tm);
        int[] anchos = {200, 70, 70,300};
        for(int i = 0; i < TablaErrores.getColumnCount(); i++) {
            TablaErrores.getColumnModel().getColumn(i).setPreferredWidth(anchos[i]);
        }       
        if(el.isEmpty() && es.isEmpty())
           r=false;
        else
		{
		r=true;
		FErrores.setVisible(true);
		}
            
        return r;
                    
    }
    private void ejecutar(Analizador.Nodo instrucciones) throws Exception {
        int i = 0;
        System.out.println(instrucciones.valor);
        Analizador.Nodo instruccion;
        while (i < instrucciones.hijos.size()) {
            instruccion = instrucciones.hijos.get(i);
            System.out.println(instruccion.valor);
            if(instruccion.valor.equals("declaracion"))
            {
                this.addVariable(instruccion.hijos.get(0).valor,instruccion.hijos.get(1).valor);
            }
            else if(instruccion.valor.equals("declaracionA"))
            {
                Analizador.Nodo var=instruccion.hijos.get(0);
                this.addVariable(var.hijos.get(0).valor,var.hijos.get(1).valor);
                Object val = evaluar(instruccion.hijos.get(1));
                this.setValor(var.hijos.get(0).valor, val);
                //System.out.println(var.hijos.get(0).valor+" "+val);
            }
            else if (instruccion.valor.equals("asignacion")) {// si el nodo es asignacion
                String id = instruccion.hijos.get(0).hijos.get(0).valor;
                Object val = evaluar(instruccion.hijos.get(1));
                this.setValor(id,  val);
              //System.out.println(id+" "+val);
            } 
            else if (instruccion.valor.equals("mientras")) {
                System.out.println("WHHILE "+evaluar(instruccion.hijos.get(0)) );
              while ((Boolean) evaluar(instruccion.hijos.get(0))) {
                   ejecutar(instruccion.hijos.get(1));
                   System.out.println("======================" );
                   System.out.println(instruccion.hijos.get(0).valor);
                }
               
            }
             else if (instruccion.valor.equals(""))
             {
                 
               this.ejecutar(instruccion);
             }
              else if(instruccion.valor.equals("concatenar"))
            {
            System.out.println("ENTRO A CONCATENAR");
            String id=instruccion.hijos.get(0).valor;
            Object v=evaluar(instruccion.hijos.get(1));
            String ant=this.getValor(id).toString().replace("{","").replace("}","");
            String nue=v.toString().toString().replace("{","").replace("}","").toString().replace("[","").replace("]","");
            this.setValor(id,"{"+ant+nue+"}");

            }
            else if(instruccion.valor.equals("para"))
             {
                  String id=instruccion.hijos.get(0).valor;
                  int val=(int)this.evaluar(instruccion.hijos.get(1));
                  int limit=(int)this.evaluar(instruccion.hijos.get(2));
                  System.out.println("PARA "+id+"="+val+" limite "+limit);
                  for(int f=val;f<limit;f++)
                  {
                      this.setValor(id, f);
                     this.ejecutar(instruccion.hijos.get(3)); 
                     f=(int)this.getValor(id);
                     
                  }
                      
                  this.setValor(id,limit);
                 
             }
            else if(instruccion.valor.equals("crear"))
            {
               if(!this.HayErroes())
               {
                   String ruta=instruccion.hijos.get(0).valor.replace("{","").replace("}","");
                 String contenido=this.evaluar(instruccion.hijos.get(1)).toString().replace("{","").replace("}","").replace("[","").replace("]","");
                 this.CrearArcivo(ruta, contenido);
                 System.out.println("SE CREO EL ARCHIVO: "+ruta+" Contenido: "+contenido.toString());
                 this.enviar(contenido);
                 System.out.println("SE ENVIO: "+contenido.toString());
               }
               else
                   FErrores.setVisible(true);
                 
            }
            else if(instruccion.valor.equals("anexar"))
            {
                
                String ruta=instruccion.hijos.get(0).valor.replace("{","").replace("}","");
                System.out.println(ruta);
                String contenido=this.evaluar(instruccion.hijos.get(1)).toString().replace("{","").replace("}","").replace("[","").replace("]","");
                 
                File fichero = new File(ruta);
               
                    if (fichero.exists())
                    {
                        
                        BufferedWriter out = null;   
                        try {   
                            out = new BufferedWriter(new FileWriter(ruta, true));   
                            out.write(contenido);   
                        } catch (IOException e) {   
                            // error al procesar el archivo   
                        } finally {   
                        if (out != null) {   
                         out.close();   
                        }   
                        } 
                    }
                    else
                    {
                        this.CrearArcivo(ruta, contenido);
                        System.out.println("SE CREO EL ARCHIVO: "+ruta+" Contenido: "+contenido.toString());
                    }
                    //leer archivo y enviarlo    
                try {
                BufferedReader br = new BufferedReader(new FileReader(fichero));
                String linea = br.readLine(); 
                String cod="";
                while (linea != null) {

                    cod=cod+(linea + "\n"); 
                    linea = br.readLine();

                }
                this.enviar(cod);

                } catch (Exception ex) {
                 }
                 
            }
            i++;
        }
    }
      private Object evaluar(Analizador.Nodo nodo)throws Exception 
        {
            Analizador.Nodo aux = nodo.hijos.get(0);
           if (nodo.valor.equals("valor")) {
                if (aux.valor.equals("entero")) {
                 return Integer.parseInt(aux.hijos.get(0).valor);
                } 
                else if(aux.valor.equals("aletra"))
                {
                    Object val=evaluar(aux.hijos.get(0));
                    
                    if(val instanceof Integer)
                    {
                        if((Integer)val>0 && (Integer)val<27)
                            return "["+(char)((int)val+64)+"]";
                        else if((Integer)val>26 && (Integer)val<53)
                            return "["+(char)((int)val+70)+"]";
                        else
                            return "["+(char)48+"]";
                    }
                    else {
                throw new Exception("No se reconoce el nod0||| "+nodo.valor);
                }
                }
                else if(aux.valor.equals("separador"))
                    return "-";
                else {
                    return aux.hijos.get(0).valor;
                }
             } ////////////////// SI ES VARIABLE /////////////////////////
           else if (nodo.valor.equals("variable")) { 
            Object val=this.getValor(aux.valor);
            if (val==null) {
                ErroresSemanticos.add(new Analizador.Errores(-1,-1,"La variable: \""+nodo.valor+"\" no ha sido declarada"));
                throw new Exception("No se ha declarado la variableVV"+nodo.valor);
            } else {
                return val;
            }
            }//////////////// MULTIPLICACION//////////////////
           else if (nodo.valor.equals("*")) {
            Object primera = evaluar(nodo.hijos.get(0));
            Object segunda = evaluar(nodo.hijos.get(1));
            if (primera instanceof Integer && segunda instanceof Integer) {
                return (Integer) primera * (Integer) segunda;
            } else {
                throw new Exception("No se reconoce el nodo***"+nodo.valor);
            }
            }///////////////// SUMA ///////////////////////////
           else if (nodo.valor.equals("+")) {
            Object primera = evaluar(nodo.hijos.get(0));
            Object segunda = evaluar(nodo.hijos.get(1));
            if (primera instanceof Integer && segunda instanceof Integer) {
                return (Integer) primera + (Integer) segunda;
            } else {
                throw new Exception("No se reconoce el nodo+++"+nodo.valor);
            }
            }//////////////////// RESTA ////////////////////////
           else if (nodo.valor.equals("-")) {
            Object primera = evaluar(nodo.hijos.get(0));
            Object segunda = evaluar(nodo.hijos.get(1));
            if (primera instanceof Integer && segunda instanceof Integer) {
                return (Integer) primera - (Integer) segunda;
            } else {
                throw new Exception("No se reconoce el nodo<<"+nodo.valor);
            }
            }/////////////////// DIVISION //////////////////////////////////////
           else if (nodo.valor.equals("/")) {
            Object primera = evaluar(nodo.hijos.get(0));
            Object segunda = evaluar(nodo.hijos.get(1));
            if (primera instanceof Integer && segunda instanceof Integer) {
                return (Integer) primera / (Integer) segunda;
            } else {
                throw new Exception("No se reconoce el nodo>>"+nodo.valor);
            }
            }////////////////// MENOR QUE ////////////////////////////////////
           else if (nodo.valor.equals("<")) {
            Object primera = evaluar(nodo.hijos.get(0));
            Object segunda = evaluar(nodo.hijos.get(1));
            if (primera instanceof Integer && segunda instanceof Integer) {
                return (Integer) primera < (Integer) segunda;
            } else {
                throw new Exception("No se reconoce el nodo|-||-|"+nodo.valor);
            }
           }/////////////////// MAYOR QUE /////////////////////////////////////
           else if (nodo.valor.equals(">")) {
            Object primera = evaluar(nodo.hijos.get(0));
            Object segunda = evaluar(nodo.hijos.get(1));
            if (primera instanceof Integer && segunda instanceof Integer) {
                return (Integer) primera > (Integer) segunda;
            } else {
                throw new Exception("No se reconoce el nodo|-|"+nodo.valor);
            }
           } 
           else if (nodo.valor.equals("=<")) {
            Object primera = evaluar(nodo.hijos.get(0));
            Object segunda = evaluar(nodo.hijos.get(1));
            if (primera instanceof Integer && segunda instanceof Integer) {
                return (Integer) segunda > (Integer) primera;
            } else {
                throw new Exception("No se reconoce el nodo----"+nodo.valor);
            }
           }
           else if (nodo.valor.equals("=>")) {
            Object primera = evaluar(nodo.hijos.get(0));
            Object segunda = evaluar(nodo.hijos.get(1));
            if (primera instanceof Integer && segunda instanceof Integer) {
                return (Integer) segunda < (Integer) primera;
            } else {
                throw new Exception("No se reconoce el nodo---"+nodo.valor);
            }
           }
           else if (nodo.valor.equals("==")) {
            Object primera = evaluar(nodo.hijos.get(0));
            Object segunda = evaluar(nodo.hijos.get(1));
            System.out.println("////////// "+primera+"===="+segunda);
            if (primera instanceof Integer) {
                System.out.println("////////// INTE "+primera+"===="+segunda);
                return (Integer) primera == (Integer) segunda;
            } else if (primera instanceof String) {
                System.out.println("//////////STRI "+primera+"===="+segunda);
                return ((String) primera).equals((String) segunda);
            } else if (primera instanceof Boolean) {
                System.out.println("//////////BOOL "+primera+"===="+segunda);
                return Boolean.valueOf(primera.toString()) == Boolean.valueOf(segunda.toString());
            } else {
                throw new Exception("No se reconoce el nodo--"+nodo.valor);
            }
           }
           else if (nodo.valor.equals("><")) {
            Object primera = evaluar(nodo.hijos.get(0));
            Object segunda = evaluar(nodo.hijos.get(1));
            if (primera instanceof Integer) {
                return !((Integer) primera == (Integer) segunda);
            } else if (primera instanceof String) {
                return !(((String) primera).equals((String) segunda));
            } else if (primera instanceof Boolean) {
                return !((Boolean) primera == (Boolean) segunda);
            } else {
                throw new Exception("No se reconoce el nodo- "+nodo.valor);
            }
           }
           else if (nodo.valor.equals("&&")) {
            Boolean primera = (Boolean) evaluar(nodo.hijos.get(0));
            Boolean segunda = (Boolean) evaluar(nodo.hijos.get(1));
            return primera == true && segunda == true;
        } else if (nodo.valor.equals("||")) {
            Boolean primera = (Boolean) evaluar(nodo.hijos.get(0));
            Boolean segunda = (Boolean) evaluar(nodo.hijos.get(1));
            return primera == true || segunda == true;
        }
      
           else {
            throw new Exception("No se reconoce el nodo "+nodo.valor);
        }
           
           
        
        }
        
      
      private void CrearArcivo(String ruta,String contenido) throws IOException
      {
           FileWriter Guardar = new FileWriter(ruta); 
           Guardar.write(contenido); 
           Guardar.close(); 
      }
    /////////////////////////////////////////////////////////////////////////////////////
        ///////////////////////// METODOS PARA MANEJAR VARIABLES ///////////////////////////
        /////////////////////////////////////////////////////////////////////////////////////
    public void addVariable(String Id,String Tipo, String Valor)
	{
	if(!Variables.containsKey(Id))
	{
	Variable v1=new Variable(Id,Tipo,Valor);
	Variables.put(Id,v1);
	System.out.println("Se Agrego Var: "+Id+" Tipo: "+Tipo+" Valor: "+Valor);
	}else
	{
            ErroresSemanticos.add(new Analizador.Errores(-1, -1,"La variable: \""+Id+"\" ya existe"));
            System.out.println("LA VARIABLE: "+Id+" ya existe");
	}
	}
	public void addVariable(String Id,String Tipo)
	{
	if(!Variables.containsKey(Id))
	{
	Variable v1=new Variable(Id,Tipo,"");
	Variables.put(Id,v1);
	System.out.println("Se Agrego Var: "+Id+" Tipo: "+Tipo);
	}else
	{
            ErroresSemanticos.add(new Analizador.Errores(-1, -1,"La variable: \""+Id+"\" ya existe"));
	System.out.println("LA VARIABLE: "+Id+" ya existe");
	}
	}
	
	public void setValor(String Id, Object Valor)
	{
	if(Variables.containsKey(Id))
	{
		Variable auxv=Variables.get(Id);
		auxv.setValor(Valor);
		Variables.put(Id,auxv);
		System.out.println("Se actualizo la var: "+Id+": "+Valor);
	}
	else{
            ErroresSemanticos.add(new Analizador.Errores(-1, -1,"La variable: \""+Id+"\" No existe"));
	System.out.println("LA VARIABLE: "+Id+" no existe");
	}
	
	}
		
	public Object getValor(String Id)
	{
	Object v=null;
	if(Variables.containsKey(Id))
	{
	Variable auxv=Variables.get(Id);
	v=auxv.getValor();
	}
	else{
            ErroresSemanticos.add(new Analizador.Errores(-1, -1,"La variable: \""+Id+"\" No existe"));
	System.out.println("LA VARIABLE: "+Id+" no existe");
	}
	return v;
	}
	
	public String getTipo(String Id)
	{
	String t="Vnull";
	if(Variables.containsKey(Id))
	{
	Variable auxv=Variables.get(Id);
	t=auxv.getTipo();
	}
	else{
            ErroresSemanticos.add(new Analizador.Errores(-1, -1,"La variable: \""+Id+"\" No existe"));
	System.out.println("LA VARIABLE: "+Id+" no existe");
	}
	return t;
	}
	
        private boolean existeVar(String id)
        {
            return Variables.containsKey(id);
        }
    
    /////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////// METODOS PARA MANEJAR SOCKETS ///////////////////////////
    /////////////////////////////////////////////////////////////////////////////////////
        
        //envia un mensaje por socket
    public void enviar(String mensaje) throws UnknownHostException, IOException {
         DataOutputStream Salida;//se almacena la cadena
        try {
            Salida = new DataOutputStream(conexion.getOutputStream());
            //se van a enviar una arreglo de bytes codificados en ASCII para que C# los pueda leer correctamente.
            byte[] salida = mensaje.getBytes("ASCII");
            //se envia el vector desde la posicion 0 hasta su ultima posicion.
            Salida.write(salida, 0, salida.length);
      } catch (IOException e) {
          System.out.println(e);
        }
    }
    
     /////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////// METODOS PARA MANEJAR ARCHIVO ///////////////////////////
    /////////////////////////////////////////////////////////////////////////////////////
    public void guardarComo() {
        String codigo = editor.getText(); 
        try {
            JFileChooser fc = new JFileChooser(System.getProperty("user.dir"));
            fc.showSaveDialog(this); //Muestra el diálogo
            File f = fc.getSelectedFile();
            if (f != null) {
                FileWriter Guarda = new FileWriter(f + ".txt"); 
                Guarda.write(codigo); 
                Guarda.close(); 
            }
        } catch (IOException ioe) {
            System.out.println("Error"); //Tratar excepcion
        }

    }
        public void guardar() {
        
        if (ubicacion == "") {  
            guardarComo();
        } 
        
        //Guardar como
        else {
            try {

                PrintWriter escribir = new PrintWriter(new FileWriter(ubicacion));
                String[] lineas = editor.getText().split("\n");
                for (int x = 0; x < lineas.length; x++) {  
                    escribir.println(lineas[x]); 
                }
                escribir.close();
            } catch (IOException e) {
                System.err.println(e);

            }
        }

    }
        
        
         public void abrirArchivo() {

        JFileChooser fc = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Archivos", "txt"); // Se puede poner la extension deseada
        fc.setFileFilter(filter);
        int seleccion = fc.showOpenDialog(null);
        if (seleccion == JFileChooser.APPROVE_OPTION) {
            File fichero = fc.getSelectedFile();
            ubicacion = fichero.toString();
            try {
                BufferedReader br = new BufferedReader(new FileReader(fichero));
                String linea = br.readLine(); 
                String cod="";
                while (linea != null) {

                    cod=cod+(linea + "\n"); 
                    linea = br.readLine();

                }
                editor.setText(cod);

            } catch (Exception ex) {
            }

        }

    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFrame FErrores;
    private javax.swing.JTable TablaErrores;
    private javax.swing.JTextPane editor;
    private javax.swing.JFrame fAcerca;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
